/* Generated By:JavaCC: Do not edit this line. EscanerTokenManager.java */
package org.grupo21.Escaner;

/** Token Manager. */
public class EscanerTokenManager implements EscanerConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x7fe000L) != 0L) {
				jjmatchedKind = 23;
				return 5;
			}
			return -1;
		case 1:
			if ((active0 & 0x7fe000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 1;
				return 5;
			}
			return -1;
		case 2:
			if ((active0 & 0x67e000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 2;
				return 5;
			}
			if ((active0 & 0x180000L) != 0L)
				return 5;
			return -1;
		case 3:
			if ((active0 & 0x67e000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 3;
				return 5;
			}
			return -1;
		case 4:
			if ((active0 & 0x65e000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 4;
				return 5;
			}
			if ((active0 & 0x20000L) != 0L)
				return 5;
			return -1;
		case 5:
			if ((active0 & 0x65e000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 5;
				return 5;
			}
			return -1;
		case 6:
			if ((active0 & 0x40000L) != 0L) {
				if (jjmatchedPos < 5) {
					jjmatchedKind = 23;
					jjmatchedPos = 5;
				}
				return -1;
			}
			if ((active0 & 0x61e000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 6;
				return 5;
			}
			return -1;
		case 7:
			if ((active0 & 0x40000L) != 0L) {
				if (jjmatchedPos < 5) {
					jjmatchedKind = 23;
					jjmatchedPos = 5;
				}
				return -1;
			}
			if ((active0 & 0x21e000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 7;
				return 5;
			}
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 6) {
					jjmatchedKind = 23;
					jjmatchedPos = 6;
				}
				return -1;
			}
			return -1;
		case 8:
			if ((active0 & 0x40000L) != 0L) {
				if (jjmatchedPos < 5) {
					jjmatchedKind = 23;
					jjmatchedPos = 5;
				}
				return -1;
			}
			if ((active0 & 0x12000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 8;
				return 5;
			}
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 6) {
					jjmatchedKind = 23;
					jjmatchedPos = 6;
				}
				return -1;
			}
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			return -1;
		case 9:
			if ((active0 & 0x40000L) != 0L) {
				if (jjmatchedPos < 5) {
					jjmatchedKind = 23;
					jjmatchedPos = 5;
				}
				return -1;
			}
			if ((active0 & 0x10000L) != 0L)
				return 5;
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 6) {
					jjmatchedKind = 23;
					jjmatchedPos = 6;
				}
				return -1;
			}
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 10:
			if ((active0 & 0x40000L) != 0L) {
				if (jjmatchedPos < 5) {
					jjmatchedKind = 23;
					jjmatchedPos = 5;
				}
				return -1;
			}
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 6) {
					jjmatchedKind = 23;
					jjmatchedPos = 6;
				}
				return -1;
			}
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 11:
			if ((active0 & 0x40000L) != 0L) {
				if (jjmatchedPos < 5) {
					jjmatchedKind = 23;
					jjmatchedPos = 5;
				}
				return -1;
			}
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 6) {
					jjmatchedKind = 23;
					jjmatchedPos = 6;
				}
				return -1;
			}
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 12:
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 6) {
					jjmatchedKind = 23;
					jjmatchedPos = 6;
				}
				return -1;
			}
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 13:
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 14:
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 15:
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 16:
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			if ((active0 & 0x2000L) != 0L) {
				if (jjmatchedPos < 8) {
					jjmatchedKind = 23;
					jjmatchedPos = 8;
				}
				return -1;
			}
			return -1;
		case 17:
			if ((active0 & 0x20c000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			return -1;
		case 18:
			if ((active0 & 0x8000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			return -1;
		case 19:
			if ((active0 & 0x8000L) != 0L) {
				if (jjmatchedPos < 7) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 10);
		case 41:
			return jjStopAtPos(0, 11);
		case 42:
			return jjStopAtPos(0, 7);
		case 43:
			return jjStopAtPos(0, 5);
		case 45:
			return jjStopAtPos(0, 6);
		case 47:
			return jjStopAtPos(0, 8);
		case 60:
			jjmatchedKind = 24;
			return jjMoveStringLiteralDfa1_0(0x4000000L);
		case 61:
			jjmatchedKind = 9;
			return jjMoveStringLiteralDfa1_0(0x10000000L);
		case 62:
			jjmatchedKind = 25;
			return jjMoveStringLiteralDfa1_0(0x8000000L);
		case 99:
			return jjMoveStringLiteralDfa1_0(0x400000L);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x30000L);
		case 105:
			return jjMoveStringLiteralDfa1_0(0xe000L);
		case 109:
			return jjMoveStringLiteralDfa1_0(0x40000L);
		case 114:
			return jjMoveStringLiteralDfa1_0(0x280000L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x100000L);
		default:
			return jjMoveNfa_0(4, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 61:
			if ((active0 & 0x4000000L) != 0L)
				return jjStopAtPos(1, 26);
			else if ((active0 & 0x8000000L) != 0L)
				return jjStopAtPos(1, 27);
			else if ((active0 & 0x10000000L) != 0L)
				return jjStopAtPos(1, 28);
			break;
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x440000L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x220000L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x110000L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0xe000L);
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 97:
			if ((active0 & 0x80000L) != 0L)
				return jjStartNfaWithStates_0(2, 19, 5);
			break;
		case 99:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
		case 103:
			return jjMoveStringLiteralDfa3_0(active0, 0xc000L);
		case 112:
			return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
		case 114:
			if ((active0 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(2, 20, 5);
			return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
		case 118:
			return jjMoveStringLiteralDfa3_0(active0, 0x12000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 100:
			return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
		case 101:
			return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
		case 103:
			return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x410000L);
		case 114:
			return jjMoveStringLiteralDfa4_0(active0, 0xc000L);
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 97:
			if ((active0 & 0x20000L) != 0L)
				return jjStartNfaWithStates_0(4, 17, 5);
			break;
		case 100:
			return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
		case 101:
			return jjMoveStringLiteralDfa5_0(active0, 0x4c000L);
		case 112:
			return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
		case 116:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
		case 101:
			return jjMoveStringLiteralDfa6_0(active0, 0x210000L);
		case 110:
			return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
		case 115:
			return jjMoveStringLiteralDfa6_0(active0, 0xe000L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
		case 108:
			return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
		case 110:
			return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
		case 111:
			return jjMoveStringLiteralDfa7_0(active0, 0xc000L);
		case 114:
			return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
		case 100:
			return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
		case 111:
			return jjMoveStringLiteralDfa8_0(active0, 0x202000L);
		case 115:
			return jjMoveStringLiteralDfa8_0(active0, 0xc000L);
		case 118:
			return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
		default:
			break;
		}
		return jjStartNfa_0(6, active0);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0);
			return 8;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa9_0(active0, 0x20c000L);
		case 101:
			return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
		case 110:
			return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
		case 111:
			return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
		case 116:
			return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(7, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0);
			return 9;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
		case 99:
			return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
		case 100:
			return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
		case 105:
			return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
		case 110:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
		case 111:
			return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
		case 115:
			if ((active0 & 0x10000L) != 0L)
				return jjStartNfaWithStates_0(9, 16, 5);
			break;
		default:
			break;
		}
		return jjStartNfa_0(8, active0);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(8, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0);
			return 10;
		}
		switch (curChar) {
		case 105:
			return jjMoveStringLiteralDfa11_0(active0, 0xa000L);
		case 110:
			return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
		case 111:
			return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
		case 116:
			return jjMoveStringLiteralDfa11_0(active0, 0x440000L);
		default:
			break;
		}
		return jjStartNfa_0(9, active0);
	}

	private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(9, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0);
			return 11;
		}
		switch (curChar) {
		case 97:
			if ((active0 & 0x40000L) != 0L)
				return jjStopAtPos(11, 18);
			return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
		case 110:
			return jjMoveStringLiteralDfa12_0(active0, 0x6000L);
		case 115:
			return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
		case 118:
			return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0);
	}

	private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(10, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0);
			return 12;
		}
		switch (curChar) {
		case 99:
			return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
		case 101:
			return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
		case 105:
			return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
		case 108:
			if ((active0 & 0x400000L) != 0L)
				return jjStopAtPos(12, 22);
			break;
		case 116:
			return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
		default:
			break;
		}
		return jjStartNfa_0(11, active0);
	}

	private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(11, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0);
			return 13;
		}
		switch (curChar) {
		case 99:
			return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
		case 105:
			return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
		case 111:
			return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
		case 114:
			return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(12, active0);
	}

	private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(12, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0);
			return 14;
		}
		switch (curChar) {
		case 105:
			return jjMoveStringLiteralDfa15_0(active0, 0x2000L);
		case 110:
			return jjMoveStringLiteralDfa15_0(active0, 0xc000L);
		case 115:
			return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(13, active0);
	}

	private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(13, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, active0);
			return 15;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
		case 105:
			return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
		case 116:
			return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
		case 117:
			return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
		default:
			break;
		}
		return jjStartNfa_0(14, active0);
	}

	private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(14, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, active0);
			return 16;
		}
		switch (curChar) {
		case 105:
			return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
		case 108:
			if ((active0 & 0x2000L) != 0L)
				return jjStopAtPos(16, 13);
			break;
		case 111:
			return jjMoveStringLiteralDfa17_0(active0, 0x204000L);
		default:
			break;
		}
		return jjStartNfa_0(15, active0);
	}

	private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(15, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(16, active0);
			return 17;
		}
		switch (curChar) {
		case 110:
			if ((active0 & 0x200000L) != 0L)
				return jjStopAtPos(17, 21);
			return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
		case 115:
			if ((active0 & 0x4000L) != 0L)
				return jjStopAtPos(17, 14);
			break;
		default:
			break;
		}
		return jjStartNfa_0(16, active0);
	}

	private int jjMoveStringLiteralDfa18_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(16, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(17, active0);
			return 18;
		}
		switch (curChar) {
		case 117:
			return jjMoveStringLiteralDfa19_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(17, active0);
	}

	private int jjMoveStringLiteralDfa19_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(17, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(18, active0);
			return 19;
		}
		switch (curChar) {
		case 111:
			return jjMoveStringLiteralDfa20_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(18, active0);
	}

	private int jjMoveStringLiteralDfa20_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(18, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(19, active0);
			return 20;
		}
		switch (curChar) {
		case 115:
			if ((active0 & 0x8000L) != 0L)
				return jjStopAtPos(20, 15);
			break;
		default:
			break;
		}
		return jjStartNfa_0(19, active0);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	@SuppressWarnings("unused")
	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 4;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 5:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 23)
								kind = 23;
							jjCheckNAdd(3);
						}
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 4:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 12)
								kind = 12;
							jjCheckNAdd(0);
						}
						break;
					case 0:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 12)
							kind = 12;
						jjCheckNAdd(0);
						break;
					case 1:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 3:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 23)
							kind = 23;
						jjCheckNAdd(3);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 5:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 23)
								kind = 23;
							jjCheckNAdd(3);
						}
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 23)
								kind = 23;
							jjCheckNAdd(3);
						}
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 4:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 23)
								kind = 23;
							jjCheckNAdd(3);
						}
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 1:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(1, 2);
						break;
					case 2:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 23)
							kind = 23;
						jjCheckNAdd(3);
						break;
					case 3:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 23)
							kind = 23;
						jjCheckNAdd(3);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = {};

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, "\53", "\55", "\52", "\57", "\75",
			"\50", "\51", null, "\151\156\166\145\162\163\151\157\156\137\151\156\151\143\151\141\154",
			"\151\156\147\162\145\163\157\163\137\143\157\156\164\151\156\165\157\163",
			"\151\156\147\162\145\163\157\163\137\144\151\163\143\157\156\164\151\156\165\157\163",
			"\144\151\166\151\144\145\156\144\157\163", "\144\145\165\144\141",
			"\155\141\162\147\145\156\137\166\145\156\164\141", "\162\157\141", "\164\151\162",
			"\162\145\143\165\160\145\162\157\137\151\156\166\145\162\163\151\157\156",
			"\143\141\160\151\164\141\154\137\164\157\164\141\154", null, "\74", "\76", "\74\75", "\76\75", "\75\75", };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x1fffffe1L, };
	static final long[] jjtoSkip = { 0x1eL, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[4];
	private final int[] jjstateSet = new int[8];
	protected char curChar;

	/** Constructor. */
	public EscanerTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public EscanerTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 4; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	@SuppressWarnings("unused")
	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

}
